import React, { useState, useEffect } from 'react';
import { styles } from '../styles/styles';
import { getProfile, getWallet, getTransactions, depositFunds, withdrawFunds } from '../services/api';
import {
    saveProfileData, getProfileData,
    saveBalanceData, getBalanceData,
    saveTransactionsData, getTransactionsData,
    saveProfilePhoto, getProfilePhoto
} from '../services/db'; // –î–æ–±–∞–≤–∏–ª —Ä–∞–±–æ—Ç—É —Å IndexedDB


const Profile = () => {
  const [isBalanceOpen, setIsBalanceOpen] = useState(false);
  const [isHistoryOpen, setIsHistoryOpen] = useState(false);
  const [profilePhoto, setProfilePhoto] = useState('https://surl.li/uwuvai'); // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ–æ—Ç–æ
  const [user, setUser] = useState({
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
  });
  const [balance, setBalance] = useState({});
  /**
   * @typedef {Object} Transaction
   * @property {string} amount - –°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
   * @property {string} currency_code - –ö–æ–¥ –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "EUR").
   * @property {string} final_currency_balance - –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –≤–∞–ª—é—Ç–µ.
   * @property {string} final_pln_balance - –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ PLN.
   * @property {number} id - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
   * @property {string} timestamp - –í—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ UTC.
   * @property {string} transaction_type - –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä "buy" –∏–ª–∏ "sell".
   */

  /**
   * @type {Transaction[]}
   */
  const [transactions, setTransactions] = useState([]);
  const [depositAmount, setDepositAmount] = useState('');

// –í useEffect –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö
    useEffect(() => {
        const fetchData = async () => {
            try {
                let profileData, walletData, transactionsData, storedPhoto;

                if (navigator.onLine) {
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–Ω–ª–∞–π–Ω-–¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
                    profileData = await getProfile();
                    setUser({
                        firstName: profileData.firstname,
                        lastName: profileData.lastname,
                        email: profileData.email,
                        phone: profileData.phone,
                    });
                    await saveProfileData(profileData);

                    walletData = await getWallet();
                    setBalance(walletData);
                    await saveBalanceData(walletData);

                    transactionsData = await getTransactions();
                    setTransactions(transactionsData);
                    await saveTransactionsData(transactionsData);
                } else {
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ñ—Ñ–ª–∞–π–Ω-–¥–∞–Ω–Ω—ã–µ –∏–∑ IndexedDB
                    profileData = await getProfileData();
                    if (profileData) {
                        setUser({
                            firstName: profileData.firstname,
                            lastName: profileData.lastname,
                            email: profileData.email,
                            phone: profileData.phone,
                        });
                    }

                    walletData = await getBalanceData();
                    if (walletData) {
                        setBalance(walletData);
                    }

                    transactionsData = await getTransactionsData();
                    if (transactionsData) {
                        setTransactions(transactionsData);
                    }
                }

                // üì∏ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –∏–∑ IndexedDB, –∏—Å–ø–æ–ª—å–∑—É—è email
                storedPhoto = await getProfilePhoto(user.email); // –¢–µ–ø–µ—Ä—å –ø–æ email
                if (storedPhoto) {
                    setProfilePhoto(storedPhoto);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
            }
        };

        fetchData();
    }, [user.email]); // –î–æ–±–∞–≤–∏–ª –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç user.email

// –í –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ Profile
const handleUploadPhoto = async () => {
  try {
    const fileInput = document.createElement('input');
    fileInput.type = 'file';
    fileInput.accept = 'image/*';
    fileInput.onchange = async (e) => {
      const file = e.target.files[0];
      if (file && user.email) { // –ò—Å–ø–æ–ª—å–∑—É–µ–º user.email
        const reader = new FileReader();
        reader.onload = async (event) => {
          const newPhoto = event.target.result;
          setProfilePhoto(newPhoto);
          await saveProfilePhoto(user.email, newPhoto); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ email
        };
        reader.readAsDataURL(file);
      }
    };
    fileInput.click();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ:', error);
  }
};

    useEffect(() => {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞
        const sortedTransactions = [...transactions];

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ timestamp –æ—Ç —Å–∞–º—ã—Ö –Ω–æ–≤—ã—Ö –∫ —Å–∞–º—ã–º —Å—Ç–∞—Ä—ã–º
        sortedTransactions.sort((a, b) => {
            const timestampA = new Date(a.timestamp);
            const timestampB = new Date(b.timestamp);

            return timestampB - timestampA;  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç —Å–∞–º—ã—Ö –Ω–æ–≤—ã—Ö
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –ø–æ—Ä—è–¥–æ–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫
        if (JSON.stringify(sortedTransactions) !== JSON.stringify(transactions)) {
            setTransactions(sortedTransactions);
        }
    }, [transactions]);  // –°–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ transactions


    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
  // üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
  const handleDeposit = async () => {
    if (!depositAmount || isNaN(depositAmount) || depositAmount <= 0) {
      alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è');
      return;
    }

    try {
      await depositFunds(parseFloat(depositAmount));
      const walletData = await getWallet();
      setBalance(walletData); // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç –±–∞–ª–∞–Ω—Å–∞
      alert('–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω');
      setDepositAmount('');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å');
    }
  };

  const handleWithdraw = async () => {
    console.log(balance.PLN)
    console.log(depositAmount);
    if (!depositAmount || isNaN(depositAmount) || depositAmount <= 0 || parseFloat(depositAmount) > parseFloat(balance.PLN)) {
      alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è —Å–Ω—è—Ç–∏—è');
      return;
    }

    try {
      await withdrawFunds(parseFloat(depositAmount));
      const walletData = await getWallet();
      setBalance(walletData); // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç –±–∞–ª–∞–Ω—Å–∞
      alert('–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç');
      setDepositAmount('');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –¥–µ–Ω–µ–≥ —Å–æ —Å—á—ë—Ç–∞:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ —Å–æ —Å—á—ë—Ç–∞');
    }
  };

  return (
    <div style={styles.profileContainer}>
      {/* –ë–ª–æ–∫ —Å —Ñ–æ—Ç–æ –∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
      <div style={styles.profileSection}>
        <div style={{ display: 'flex', alignItems: 'center', gap: '20px' }}>
          <img src={profilePhoto} alt="–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è" style={styles.profilePhoto} />
          <div>
            <h2 style={styles.profileName}>{user.firstName} {user.lastName}</h2>
            <p style={styles.profileEmail}>{user.email}</p>
            <p style={styles.profilePhone}>{user.phone}</p>
          </div>
        </div>
        <button onClick={handleUploadPhoto} style={styles.uploadButton}>
          –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ
        </button>
      </div>

      {/* –ë–ª–æ–∫ —Å –±–∞–ª–∞–Ω—Å–æ–º */}
      <div style={styles.profileSection}>
        <div
          style={styles.profileSectionHeader}
          onClick={() => setIsBalanceOpen(!isBalanceOpen)}
        >
          <h3 style={styles.profileSectionTitle}>–ë–∞–ª–∞–Ω—Å</h3>
          <span>{isBalanceOpen ? '‚ñ≤' : '‚ñº'}</span>
        </div>
        {isBalanceOpen && (
          <div style={styles.profileSectionContent}>
            {balance && Object.keys(balance).map((currency) => (
              <p key={currency}>
                {currency}: {balance[currency]}
              </p>
            ))}
            <div style={{ marginTop: '10px', justifyContent: 'space-between' }}>
              <input
                type="number"
                value={depositAmount}
                onChange={(e) => setDepositAmount(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                style={{ padding: '5px', marginRight: '10px' }}
              />
              <button onClick={handleDeposit} style={styles.uploadButton}>
                –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
              </button>
              <button onClick={handleWithdraw} style={styles.uploadButton}>
                –°–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å
              </button>
            </div>
          </div>
        )}
      </div>

      {/* –ë–ª–æ–∫ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π */}
      <div style={styles.profileSection}>
        <div
          style={styles.profileSectionHeader}
          onClick={() => setIsHistoryOpen(!isHistoryOpen)}
        >
          <h3 style={styles.profileSectionTitle}>–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</h3>
          <span>{isHistoryOpen ? '‚ñ≤' : '‚ñº'}</span>
        </div>
        {isHistoryOpen && (
            <div style={styles.profileSectionContent}>
              {transactions.map((transaction) => (
                  <div key={transaction.id} style={styles.transactionItem}>
                    <p><strong>Date: {new Date(transaction.timestamp).toLocaleString()}</strong></p>
                    <p>
                      {transaction.transaction_type === "buy" ? "Bought" : "Sold"}:
                      {parseFloat(transaction.amount).toString()} {transaction.currency_code}
                    </p>
                    <p>
                      Final currency balance: {parseFloat(transaction.final_currency_balance).toString()} {transaction.currency_code}
                    </p>
                    <p>
                      Final PLN balance: {parseFloat(transaction.final_pln_balance).toString()} PLN
                    </p>
                    {transaction.price && (
                        <p>
                          Price: {parseFloat(transaction.price).toString()} {transaction.currency_code} per unit
                        </p>
                    )}
                  </div>
              ))}
            </div>
        )}
      </div>
    </div>
  );
};

export default Profile;
