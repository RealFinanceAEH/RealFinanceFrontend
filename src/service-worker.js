/* eslint-disable no-restricted-globals */

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, CacheFirst } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  ({ request, url }) => {
    if (request.mode !== 'navigate') return false;
    if (url.pathname.startsWith('/_')) return false;
    if (url.pathname.match(fileExtensionRegexp)) return false;
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// Cache images
registerRoute(
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'),
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [new ExpirationPlugin({ maxEntries: 50 })],
  })
);

// Cache API responses
const API_CACHE_NAME = 'api-cache-v1';
registerRoute(
  ({ url }) => url.origin === 'https://5-22-220-180.pl-waw1.upcloud.host/api', // Замените на ваш бэкенд
  new StaleWhileRevalidate({
    cacheName: API_CACHE_NAME,
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50, // Максимальное количество кэшированных запросов
        maxAgeSeconds: 24 * 60 * 60, // Кэшировать на 1 день
      }),
    ],
  })
);

// Handle messages (e.g., skip waiting)
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Install event: cache static assets
const CACHE_NAME = 'currency-pwa-v1';
const ASSETS_TO_CACHE = [
  '/',
  '/index.html',
  '/static/js/bundle.js',
  '/static/css/main.css',
  '/manifest.json',
  '/logo192.png',
  '/logo512.png',
];

self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) => {
      return cache.addAll(ASSETS_TO_CACHE);
    })
  );
});

// Fetch event: serve cached API responses when offline
self.addEventListener('fetch', (event) => {
  const { request } = event;

  // Обрабатываем запросы к API
  if (request.url.startsWith('https://5-22-220-180.pl-waw1.upcloud.host/api')) { // Замените на ваш бэкенд
    event.respondWith(
      caches.match(request).then((cachedResponse) => {
        // Возвращаем закэшированный ответ, если он есть
        if (cachedResponse) {
          return cachedResponse;
        }

        // Если нет кэша, выполняем запрос и кэшируем ответ
        return fetch(request).then((response) => {
          const responseToCache = response.clone();
          caches.open(API_CACHE_NAME).then((cache) => {
            cache.put(request, responseToCache);
          });
          return response;
        });
      })
    );
  } else {
    // Обрабатываем статические ресурсы
    event.respondWith(
      caches.match(request).then((response) => {
        return response || fetch(request);
      })
    );
  }
});